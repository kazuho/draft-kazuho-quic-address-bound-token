



QUIC                                                              K. Oku
Internet-Draft                                                    Fastly
Intended status: Standards Track                          March 29, 2019
Expires: September 30, 2019


                 Shared Congestion Controller for QUIC
                   draft-kazuho-quic-shared-cc-latest

Abstract

   This document describes a QUIC extension for sharing address
   validation and congestion control logic among multiple connections
   established between the same two endpoints.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 30, 2019.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Oku                    Expires September 30, 2019               [Page 1]

Internet-Draft    Shared Congestion Controller for QUIC       March 2019


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
   2.  The address_bound_token Transport Parameter . . . . . . . . .   3
   3.  Sharing the Congestion Controller . . . . . . . . . . . . . .   3
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   4
     4.1.  Reflection Attack . . . . . . . . . . . . . . . . . . . .   4
     4.2.  Plaintext Tokens  . . . . . . . . . . . . . . . . . . . .   4
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   4
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   4
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .   4
     6.2.  Informative References  . . . . . . . . . . . . . . . . .   4
   Appendix A.  Design Variations  . . . . . . . . . . . . . . . . .   5
     A.1.  Using Alt-Svc Name as a Key . . . . . . . . . . . . . . .   5
     A.2.  Cross-connection Prioritization . . . . . . . . . . . . .   5
   Appendix B.  Acknowledgements . . . . . . . . . . . . . . . . . .   6
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   6

1.  Introduction

   Some if not all of the application protocols that are built on top of
   QUIC [QUIC-TRANSPORT], including HTTP/3 [QUIC-HTTP], require or would
   require clients to establish different connections for each server
   name, even when those names are hosted by the same server.  This
   restriction introduces several drawbacks:

   o  Address validation is required for each connection establishment,
      thereby restricting the amount of data that a server can initially
      send.

   o  Each connection would go through the slow-start phase, limiting
      the amount of data that can be sent by a server during the early
      stages of each connection.

   o  It is hard if not impossible to control the distribution of the
      bandwidth among the connections.

   Tokens sent using NEW_TOKEN frames mitigate the first two concerns to
   some extent, though the effectiveness depends on the probability of
   clients reestablishing the connections using the same server name.

   To resolve these issues, this document defines a QUIC transport
   parameter that expands the scope of the token from the name of the
   server to an union of the name and the server's address tuple.

   When sending a token, a server would embed an identifier of the
   congestion controller associated to the connection.  Then, when it



Oku                    Expires September 30, 2019               [Page 2]

Internet-Draft    Shared Congestion Controller for QUIC       March 2019


   accepts a new connection using the advertised token, associates the
   new connection to the existing congestion controller by using the
   identifier found in the provided token.  Once the server succeeds in
   associating the new connection to the existing congestion controller,
   it can skip address validation, slow-start phase, and use the
   congestion controller for distributing bandwidth between both the old
   and the new connecion.

   Even when there is no existing connection, sharing the tokens between
   different server names raises the chance of the server receiving a
   token that has not yet expired, thereby improving the odds of
   skipping address validation and reusing the information of the path,
   such as the estimated round-trip time and the bandwidth.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  The address_bound_token Transport Parameter

   A server sends the "address_bound_token" transport parameter (0xTBD)
   to indicate the client that the token it would send using the
   NEW_TOKEN frame can be used for future connections established
   against the same server name, or for those sharing the same server IP
   address and port.

   Only the server sends the "address_bound_token" transport parameter.
   The transport parameter does not carry a value; the length of the
   value MUST be set to zero.  An endpoint that receives the transport
   parameter not conforming to these requirements MUST terminate the
   connection with a PROTOCOL_VIOLATION error.

3.  Sharing the Congestion Controller

   When multiple QUIC connections are associated to a single congestion
   controller, how the send window is distributed between the
   connections is up to the sender's discretion.

   However, acknowledgements MUST be sent out no later than as when the
   congestion controller is not consolidated.  The loss recovery logic
   SHOULD operate independently for each connection, while forwarding
   receipts of acknowledgements and loss signals to the consolidated
   congestion controller.






Oku                    Expires September 30, 2019               [Page 3]

Internet-Draft    Shared Congestion Controller for QUIC       March 2019


4.  Security Considerations

4.1.  Reflection Attack

   An attacker can create a connection to obtain an address-bound token,
   warm up the connection, then initiate a new connection by using the
   token with a spoofed client address or port number.  If the server
   skips address validation and retains the congestion window as-is, the
   spoofed address might receive a fair amount of packet.

   The impact of the attack is equivalent to the spoofed NAT rebinding
   attack.  A server SHOULD NOT skip path validation if the source IP
   address of an initiating connection is different from the address for
   which the address-bound token was issued.

4.2.  Plaintext Tokens

   A server MUST NOT issue an unbound token that includes the name of
   the original server or the identifier of the congestion controller in
   cleartext, because if visible on the wire, observers can use that
   information to correlate the ongoing connection establishment and the
   properties of the connection that previously existed.

5.  IANA Considerations

   TBD

6.  References

6.1.  Normative References

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", draft-ietf-quic-
              transport-16 (work in progress), October 2018.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.

6.2.  Informative References

   [QUIC-HTTP]
              Bishop, M., Ed., "Hypertext Transfer Protocol Version 3
              (HTTP/3)", draft-ietf-quic-http-16 (work in progress),
              October 2018.




Oku                    Expires September 30, 2019               [Page 4]

Internet-Draft    Shared Congestion Controller for QUIC       March 2019


   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.

   [RFC7838]  Nottingham, M., McManus, P., and J. Reschke, "HTTP
              Alternative Services", RFC 7838, DOI 10.17487/RFC7838,
              April 2016, <https://www.rfc-editor.org/info/rfc7838>.

Appendix A.  Design Variations

A.1.  Using Alt-Svc Name as a Key

   An alternative approach to using the server's address tuple as the
   scope of the token is to use the "host" value of the Alt-Svc
   [RFC7838] header field as the scope.

   In such an approach, a server would send the host value for all the
   origins it hosts.  Then, a client using the value of the host as the
   key would be able to send a token received by any of the connections
   that went to the server on any of the future connections that goes to
   the server.

   The downside of the approach is that the design is specific to HTTP
   [RFC7230].

A.2.  Cross-connection Prioritization

   A natural extension to the proposed scheme would be to define a way
   of prioritizing the connections, so that some connections can be
   given higher precedence than others.  As an example, it would be
   sensible to prioritize a connection carrying realtime video stream
   above a connection that is transferring an update image of an
   operating system.

   A simple way of priortizing between the connections would be to
   associate a priority value to every connection that would be
   respected by the sender when it distributes the bandwidth among the
   connections.

   The PRIORITY frame (type=0xTBD) indicates the priority.

    0
    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |  Priority (8) |
   +-+-+-+-+-+-+-+-+




Oku                    Expires September 30, 2019               [Page 5]

Internet-Draft    Shared Congestion Controller for QUIC       March 2019


   The Priority field carries the priority of the connection, subtracted
   by one.

   Each connection is assigned a priority value between 1 and 256.  The
   initial priority is 16.

   The PRIORITY frame is sent by an endpoint to encourage the receiver
   to assign bandwidth proportional to the suggested priority value for
   each connection.

   The priority value carried by the PRIORITY frame is unidirectional.
   A client advertises its preference on how the data sent by the server
   should be prioritized; a server advertises its preference on how the
   data sent by the client should be prioritized.

Appendix B.  Acknowledgements

   A proposal exists that advocates for having a transport parameter to
   change the scope of a token to a list of server names:
   https://svs.informatik.uni-hamburg.de/publications/2019/2019-03-22-
   Sy-preprint-Surfing-the-Web-quicker-than-QUIC-via-a-shared-Address-
   Validation.pdf .  The approach described in this document is
   different from that is the following aspects:

   o  The scope of the token is the server's address tuple.

   o  The token is carried by a new frame, so that a server can send a
      token identified by the name and another identified by the
      server's address tuple within each connection.

   o  The token is used also for consolidating the congestion
      controller.

   o  Cross-connection prioritization is defined.

Author's Address

   Kazuho Oku
   Fastly

   Email: kazuhooku@gmail.com










Oku                    Expires September 30, 2019               [Page 6]
